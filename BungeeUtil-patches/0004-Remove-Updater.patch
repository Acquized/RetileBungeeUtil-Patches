From f32919f9e60e83a379949383aef8b4a9f7ce8265 Mon Sep 17 00:00:00 2001
From: Acquized <flare.returns@outlook.com>
Date: Wed, 5 Oct 2016 11:26:17 +0200
Subject: [PATCH] [Feature] Remove Updater

---
 .../dev/wolveringer/BungeeUtil/BungeeUtil.java     |   5 +-
 src/main/java/dev/wolveringer/BungeeUtil/Main.java |  61 +----
 .../java/dev/wolveringer/profiler/Profiler.java    |   7 +-
 src/main/java/dev/wolveringer/updater/Updater.java | 299 ---------------------
 4 files changed, 11 insertions(+), 361 deletions(-)
 delete mode 100644 src/main/java/dev/wolveringer/updater/Updater.java

diff --git a/src/main/java/dev/wolveringer/BungeeUtil/BungeeUtil.java b/src/main/java/dev/wolveringer/BungeeUtil/BungeeUtil.java
index 96e17df..c531bf8 100644
--- a/src/main/java/dev/wolveringer/BungeeUtil/BungeeUtil.java
+++ b/src/main/java/dev/wolveringer/BungeeUtil/BungeeUtil.java
@@ -78,8 +78,9 @@ public final class BungeeUtil {
         try {
             active = true;
             setInformation("\u00A7aLoading configuration.");
-            sendMessage("\u00A7aLoading configuration.");
-            Configuration.init();
+            // ProjectRetile Start
+            // Configuration removed as hard coded.
+            // ProjectRetile End
             sleep(500);
             setInformation("\u00A7aValidate configuration.");
             sendMessage("\u00A7aValidate configuration.");
diff --git a/src/main/java/dev/wolveringer/BungeeUtil/Main.java b/src/main/java/dev/wolveringer/BungeeUtil/Main.java
index 15f4b08..fb25009 100644
--- a/src/main/java/dev/wolveringer/BungeeUtil/Main.java
+++ b/src/main/java/dev/wolveringer/BungeeUtil/Main.java
@@ -4,24 +4,10 @@ import net.md_5.bungee.api.plugin.Plugin;
 
 import org.fusesource.jansi.AnsiConsole;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Comparator;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map.Entry;
-
-import dev.wolveringer.BungeeUtil.configuration.Configuration;
 import dev.wolveringer.BungeeUtil.packets.Packet;
-import dev.wolveringer.chat.ChatColor.ChatColorUtils;
-import dev.wolveringer.terminal.table.TerminalTable;
-import dev.wolveringer.terminal.table.TerminalTable.Align;
-import dev.wolveringer.terminal.table.TerminalTable.TerminalRow;
-import dev.wolveringer.updater.Updater;
 
 public class Main extends Plugin {
     private static Main main = null;
-    public Updater updater;
 
     public static Main getMain() {
         return main;
@@ -38,51 +24,14 @@ public class Main extends Plugin {
         main = this;
         if (BungeeUtil.getInstance() == null)
             BungeeUtil.createInstance(main);
-        Configuration.init();
         BungeeUtil.getInstance().sendMessage("Ansi consolen class: " + AnsiConsole.out.getClass());
         BungeeUtil.getInstance().setInformation("Check for updates");
-        try {
-            updater = new Updater("https://raw.githubusercontent.com/WolverinDEV/BungeeUtil/jars/versions.json");
-            updater.loadData();
-            if (updater.getData() == null) {
-                BungeeUtil.getInstance().sendMessage("\u00A7cCant get versions informations.");
-            } else {
-                if (Configuration.isUpdaterActive() && updater.checkUpdate()) {
-                    BungeeUtil.getInstance().setInformation("\u00A7cRestarting bungeecord");
-                    BungeeUtil.getInstance().sleep(1000);
-                    BungeeUtil.getInstance().setInformation(null);
-                    System.exit(-1);
-                    return;
-                }
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
 
-        if (Configuration.getLastVersion() != null && updater != null) {
-            BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aBungeeUtil successful updated!");
-            BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aUpdates:");
-            TerminalTable table = new TerminalTable(new TerminalTable.TerminalColumn[]{
-                    new TerminalTable.TerminalColumn("Version", Align.LEFT),
-                    new TerminalTable.TerminalColumn("Changes", Align.LEFT)
-            });
-            HashMap<String, List<String>> _changes = updater.createChanges(Configuration.getLastVersion());
-            List<Entry<String, List<String>>> changes = new ArrayList<>(_changes.entrySet());
-            Collections.sort(changes, new Comparator<Entry<String, List<String>>>() {
-                @Override
-                public int compare(Entry<String, List<String>> o1, Entry<String, List<String>> o2) {
-                    return Long.compare(Long.parseLong(o2.getKey().replaceAll("\\.", "")), Long.parseLong(o1.getKey().replaceAll("\\.", "")));
-                }
-            });
-            for (Entry<String, List<String>> e : changes) {
-                TerminalRow row = new TerminalRow(2);
-                row.getColumns()[1].addAll(e.getValue());
-                row.setText(0, e.getKey());
-                table.addRow(row);
-            }
-            for (String message : table.buildLines())
-                BungeeUtil.getInstance().sendMessage(message);
-        }
+        // ProjectRetile Start
+
+        // Updater removed as unused
+
+        // ProjectRetile End
 
         if (!BungeeUtil.getInstance().isInjected()) {
             switch (BungeeUtil.getInstance().inject()) {
diff --git a/src/main/java/dev/wolveringer/profiler/Profiler.java b/src/main/java/dev/wolveringer/profiler/Profiler.java
index 8275286..56948c0 100644
--- a/src/main/java/dev/wolveringer/profiler/Profiler.java
+++ b/src/main/java/dev/wolveringer/profiler/Profiler.java
@@ -73,10 +73,9 @@ public class Profiler {
         post.addLine("  Bungeecord protocol version  : " + BungeeCord.getInstance().getProtocolVersion());
         post.addLine("  Bungeecord game version      : " + BungeeCord.getInstance().getGameVersion());
         post.addLine("  BungeeUtil author            : " + Main.getMain().getDescription().getAuthor());
-        if (Main.getMain().updater.isNewstVersion())
-            post.addLine("  BungeeUtil version           : " + Main.getMain().getDescription().getVersion() + " (up to date)");
-        else
-            post.addLine("  BungeeUtil version      	 : " + Main.getMain().getDescription().getVersion() + " (new version avariable: " + Main.getMain().updater.getNewestVersion() + ")");
+        // ProjectRetile Start
+        post.addLine("  RetileBungeeUtil version     : " + Configuration.getLastVersion() + " (Downstream Fork of Upstream Repo)");
+        // ProjectRetile End
         post.addLine("  BungeeUtil ByteBuffType      : " + Configuration.getByteBuffType().toUpperCase());
         post.addLine("");
         post.addLine("Memory:");
diff --git a/src/main/java/dev/wolveringer/updater/Updater.java b/src/main/java/dev/wolveringer/updater/Updater.java
deleted file mode 100644
index 5625fa0..0000000
--- a/src/main/java/dev/wolveringer/updater/Updater.java
+++ /dev/null
@@ -1,299 +0,0 @@
-package dev.wolveringer.updater;
-
-import net.md_5.bungee.BungeeCord;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import java.io.BufferedInputStream;
-import java.io.BufferedReader;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileOutputStream;
-import java.io.InputStreamReader;
-import java.math.BigInteger;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.net.URLConnection;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.concurrent.TimeUnit;
-import java.util.jar.JarInputStream;
-
-import dev.wolveringer.BungeeUtil.BungeeUtil;
-import dev.wolveringer.BungeeUtil.Main;
-import dev.wolveringer.BungeeUtil.configuration.Configuration;
-import dev.wolveringer.chat.ChatColor.ChatColorUtils;
-import dev.wolveringer.util.MathUtil;
-import lombok.NonNull;
-
-/*
- * 
-{
-	CurrentVersion: "1.6.7.7",
-	Download: "https://github.com/WolverinDEV/BungeeUtil/raw/jars/buildedJars/standalone/BungeeUtil-1.6.7.7.jar",
-	VersionsHistory: [
-		{
-			Version: "1.6.7.6",
-			Download: "https://github.com/WolverinDEV/BungeeUtil/raw/jars/buildedJars/standalone/BungeeUtil-1.6.7.6.jar",
-		}
-	],
-	Changelog: [
-		{
-			Verion: "1.6.7.7",
-			Changed: [
-				"Improved ram statistics. (Terminal)",
-				"Fixed PacketPlayOutPluginMessage bug",
-				"Removed java insturmental",
-				"Reimplemented sound API (Currently not working!)"
-			]
-		}
-	]
-}
- * 
- */
-public class Updater {
-
-    private String url;
-    private JSONObject data;
-    private long last;
-
-    public Updater(String url) {
-        this.url = url;
-    }
-
-    public boolean checkUpdate() {
-        updateData();
-        BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aChecking for Plugin updates");
-        if (data == null)
-            throw new NullPointerException("HTTP Data is null. Invpoke getData() first");
-        if (!isNewstVersion()) {
-            installUpdate();
-            BungeeCord.getInstance().stop();
-            return true;
-        } else {
-            if (!isDevBuild())
-                BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aNo plugin update found! Your version is alredy the newest! (" + getCurrentVersion() + ")");
-            else
-                BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aYou plugin version is newer than the currunt public version. I think i'm a dev build... All bugs will be ignored");
-        }
-        return false;
-    }
-
-    public void installUpdate() {
-        File ownFile = new File(getClass().getProtectionDomain().getCodeSource().getLocation().getFile());
-        downloadUpdate(data.getString("Download"), ownFile);
-        Configuration.setLastVersion(getCurrentVersion());
-    }
-
-    public String getCurrentVersion() {
-        return Main.getMain().getDescription().getVersion();
-    }
-
-    public String getNewestVersion() {
-        updateData();
-        return data.getString("CurrentVersion");
-    }
-
-    public boolean isNewstVersion() {
-        return Long.parseLong(getNewestVersion().replaceAll("\\.", "")) <= Long.parseLong(getCurrentVersion().replaceAll("\\.", ""));
-    }
-
-    public boolean isDevBuild() {
-        return Long.parseLong(getCurrentVersion().replaceAll("\\.", "")) > Long.parseLong(getNewestVersion().replaceAll("\\.", ""));
-    }
-
-    /**
-     * @return errormask errors: 0: Create new file exception 1: Invalid jar 2: cant delete invalid
-     * jar 3: Download IO error 3: Finaly error
-     */
-    private int downloadUpdate(String url, File targetFile) {
-        BigInteger errorMask = new BigInteger("0");
-        errorMask.setBit(8);
-        BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aUpdating from " + getCurrentVersion() + " to " + getNewestVersion());
-        BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aStarting to download the update (" + url + ") to " + targetFile.getAbsolutePath());
-        programm:
-        try {
-            BungeeUtil.getInstance().setInformation(ChatColorUtils.COLOR_CHAR + "aDownloading update " + ChatColorUtils.COLOR_CHAR + "7[" + ChatColorUtils.COLOR_CHAR + "e000%" + ChatColorUtils.COLOR_CHAR + "7]");
-            BufferedInputStream in = null;
-            FileOutputStream fout = null;
-            try {
-                URLConnection com = new URL(url).openConnection();
-                int fileLength = com.getContentLength();
-                in = new BufferedInputStream(com.getInputStream());
-                File df;
-                if (targetFile.exists()) {
-                    BungeeUtil.getInstance().setInformation(ChatColorUtils.COLOR_CHAR + "aUsing .download file (" + targetFile.getPath() + "BungeeUtil.download)!");
-                    fout = new FileOutputStream(df = new File(targetFile.getPath() + "BungeeUtil.download"));
-                } else fout = new FileOutputStream(df = targetFile);
-                final byte data[] = new byte[1024];
-                int count;
-                int readed = 0;
-                while (true) {
-                    count = in.read(data, 0, 1024);
-                    if (count == -1) break;
-                    fout.write(data, 0, count);
-                    readed += count;
-                    String p = "000" + MathUtil.calculatePercent(readed, fileLength);
-                    p = p.substring(0, p.indexOf("."));
-                    p = p.substring(p.length() - 3, p.length());
-                    BungeeUtil.getInstance().setInformation(ChatColorUtils.COLOR_CHAR + "aDownloading update " + ChatColorUtils.COLOR_CHAR + "7[" + ChatColorUtils.COLOR_CHAR + "e" + p + "%" + ChatColorUtils.COLOR_CHAR + "7]");
-                }
-                fout.close();
-                in.close();
-                BungeeUtil.getInstance().setInformation(ChatColorUtils.COLOR_CHAR + "aDownload done!");
-                BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aUpdate downloaded!");
-                BungeeUtil.getInstance().setInformation(ChatColorUtils.COLOR_CHAR + "aCheck update for errors!");
-                BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aCheck update for errors!");
-                try {
-                    JarInputStream is = new JarInputStream(new FileInputStream(df));
-                    while (null != is.getNextJarEntry()) {
-                    }
-                    is.close();
-                } catch (Exception e) {
-                    errorMask.setBit(1);
-                    BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "cThe update contains an error. (Message: " + e.getLocalizedMessage() + ")");
-                    BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "cDeleting the update!");
-                    try {
-                        df.delete();
-                    } catch (Exception ex) {
-                        errorMask.setBit(2);
-                    }
-                    break programm;
-                }
-                BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aUpdate valid.");
-                BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aInstalling update!");
-                BungeeUtil.getInstance().setInformation(ChatColorUtils.COLOR_CHAR + "aInstalling update");
-                if (!targetFile.equals(df) && !targetFile.delete()) {
-                    BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "6Cant delete the old plugin jar.");
-                }
-                boolean deleteOld = !targetFile.equals(df);
-                if (!targetFile.createNewFile()) {
-                    deleteOld = false;
-                    BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "6Cant create new jar.");
-                }
-                FileInputStream fis = new FileInputStream(df);
-                FileOutputStream fos = new FileOutputStream(targetFile);
-                while ((count = fis.read(data, 0, 1024)) != -1) {
-                    fos.write(data, 0, count);
-                }
-                fis.close();
-                fos.close();
-                if (deleteOld && !df.delete())
-                    BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "6Cant delte cache file!");
-                BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aRestarting bungeecord!");
-                BungeeUtil.getInstance().setInformation(ChatColorUtils.COLOR_CHAR + "aUpdate installed!");
-            } catch (Exception e) {
-                errorMask.setBit(3);
-                e.printStackTrace();
-                BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "cAn error happend while downloading the update");
-            } finally {
-                if (in != null) {
-                    in.close();
-                }
-                if (fout != null) {
-                    fout.close();
-                }
-            }
-        } catch (Exception e) {
-            errorMask.setBit(4);
-            e.printStackTrace();
-            BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "cAn error happend while downloading the update");
-        }
-        return errorMask.intValue();
-    }
-
-    public JSONObject getData() {
-        updateData();
-        return data;
-    }
-
-    public Updater loadData() {
-        last = System.currentTimeMillis();
-        BungeeUtil.getInstance().sendMessage(ChatColorUtils.COLOR_CHAR + "aLoading update data!");
-        try {
-            URL i = new URL(url);
-            HttpURLConnection c = (HttpURLConnection) i.openConnection();
-            c.setRequestMethod("GET");
-            BufferedReader in = new BufferedReader(new InputStreamReader(c.getInputStream()));
-            String inputLine;
-            StringBuffer response = new StringBuffer();
-            while ((inputLine = in.readLine()) != null) {
-                response.append(inputLine);
-            }
-            in.close();
-            this.data = new JSONObject(response.toString());
-        } catch (Exception e) {
-            BungeeUtil.debug(e);
-        }
-        return this;
-    }
-
-	/*
-	@SuppressWarnings("deprecation")
-	public boolean isServerWhiteListed() {
-		try {
-			if (data == null) throw new NullPointerException("HTTP Data is null. Invpoke getData() first");
-		}
-		catch (Exception e) {
-			e.printStackTrace();
-			return true;
-		}
-		JSONObject plugins = data.getJSONObject("plugins");
-		if (plugins.has(Main.getMain().getDescription().getName())) {
-			JSONObject o = plugins.getJSONObject(Main.getMain().getDescription().getName());
-			if (o.has("whitelist")) { // TODO kick out. not longer needed
-				JSONArray a = o.getJSONArray("whitelist");
-				String host = "null";
-				String hostadress = "null";
-				try {
-					host = InetAddress.getLocalHost().getHostName();
-					hostadress = InetAddress.getLocalHost().getHostAddress();
-					if (host.equalsIgnoreCase("test-PC")) return true;
-				}
-				catch (UnknownHostException e) {
-					e.printStackTrace();
-				}
-				for (int i = 0; i < a.length(); i++) {
-					if (a.get(i).toString().equalsIgnoreCase(host) || a.get(i).toString().equalsIgnoreCase(hostadress)) return true;
-				}
-				BungeeCord.getInstance().getConsole().sendMessage(ChatColorUtils.COLOR_CHAR + "aYour Host: " + ChatColorUtils.COLOR_CHAR + "e" + host);
-				BungeeCord.getInstance().getConsole().sendMessage(ChatColorUtils.COLOR_CHAR + "aYour Host-Adress: " + ChatColorUtils.COLOR_CHAR + "e" + hostadress);
-				BungeeCord.getInstance().getConsole().sendMessage(ChatColorUtils.COLOR_CHAR + "cBoth Host's are not whitelisted.");
-				return false;
-			}
-		}
-		return true;
-	}
-	*/
-
-    public HashMap<String, List<String>> createChanges(@NonNull String lastVersion) {
-        HashMap<String, List<String>> out = new HashMap<>();
-        if (data != null) {
-            JSONArray changelogArray = data.getJSONArray("Changelog");
-            Iterator<Object> objects = changelogArray.iterator();
-            while (objects.hasNext()) {
-                JSONObject object = (JSONObject) objects.next();
-                String version;
-                System.out.print((Long.parseLong((version = object.getString("Verion")).replaceAll("\\.", "")) > Long.parseLong(lastVersion.replaceAll("\\.", ""))) + "-" + (Long.parseLong((version = object.getString("Verion")).replaceAll("\\.", "")) + ":" + Long.parseLong(getCurrentVersion().replaceAll("\\.", ""))));
-                if (Long.parseLong((version = object.getString("Verion")).replaceAll("\\.", "")) > Long.parseLong(lastVersion.replaceAll("\\.", "")) && Long.parseLong((version = object.getString("Verion")).replaceAll("\\.", "")) <= Long.parseLong(getCurrentVersion().replaceAll("\\.", ""))) {
-                    ArrayList<String> changes = new ArrayList<>();
-                    Iterator<Object> message = object.getJSONArray("Changed").iterator();
-                    while (message.hasNext()) {
-                        changes.add((String) message.next());
-                    }
-                    out.put(version, changes);
-                }
-            }
-        } else
-            out.put("error", Arrays.asList("\u00A7cCant featch versions data.", "Make shure you have an valid internet connection."));
-        return out;
-    }
-
-    public void updateData() {
-        if (System.currentTimeMillis() - last > TimeUnit.MINUTES.toMillis(10)) loadData();
-    }
-}
-- 
1.9.4.msysgit.2

